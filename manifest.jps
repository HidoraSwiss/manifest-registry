type: install
version: 1.4
name: Docker Registry
displayName: Docker Registry
homepage: https://docs.docker.com/registry/
logo: https://raw.githubusercontent.com/HidoraSwiss/manifest-registry/master/images/docker_registry.png
description: Docker Registry for images storage
ssl: true

globals:
  REGISTRY_USER: ${user.email}
  REGISTRY_PASS: ${fn.password}

nodes:
  - image: registry:latest
    count: 1
    fixedCloudlets: 1
    cloudlets: 16
    nodeGroup: cp
    extip: true
    volumes:
      - /etc/docker/registry
      - /var/lib/registry

onInstall:
  - cmd[cp]:
    - wget -O /etc/docker/registry/config.yml https://raw.githubusercontent.com/HidoraSwiss/manifest-registry/master/config/registry-config.yml
    - sed -i "s/HOST/https:\/\/${env.domain}/g" /etc/docker/registry/config.yml
    - mkdir -p /root/certs
    - openssl req -nodes -newkey rsa:4096 -keyout /root/certs/domain.key -out /root/certs/domain.csr -subj "/CN=${env.domain}"
    - openssl x509 -in /root/certs/domain.csr -out /root/certs/domain.crt -req -signkey /root/certs/domain.key -days 3650
    - openssl dhparam -out /root/certs/dhparam.pem 2048
    - htpasswd -cBb /etc/docker/registry/htpasswd ${globals.REGISTRY_USER} ${globals.REGISTRY_PASS}

  - api [cp]: jelastic.environment.control.RestartNodesByGroup

success: |
  Your Docker Registry will be ready in about 10 minutes.

  **URL**: ${env.domain}

  **Username**: ${globals.REGISTRY_USER}

  **Password**: ${globals.REGISTRY_PASS}
  
  > As we are using a self-signed certificate, you need to declare the certificat on client's side.
  > Create the file (and its path) `/etc/docker/certs.d/${env.domain/ca.crt` and paste the content of `domain.crt` in it

  Example:

  ```
  docker pull alpine
  docker tag alpine ${env.domain}/myalpine
  docker login https://${env.domain} -u ${globals.REGISTRY_USER} -p ${globals.REGISTRY_PASS}
  docker push ${env.domain}/myalpine
  ```
